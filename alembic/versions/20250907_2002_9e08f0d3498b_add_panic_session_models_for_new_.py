"""Add panic session models for new workflow

Revision ID: 9e08f0d3498b
Revises: 1b4eeae8dbae
Create Date: 2025-09-07 20:02:36.632078

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "9e08f0d3498b"  # pragma: allowlist secret
down_revision: Union[str, None] = "1b4eeae8dbae"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "panic_sessions",
        sa.Column(
            "user_id",
            sa.UUID(),
            nullable=False,
            comment="User who triggered the panic session",
        ),
        sa.Column(
            "status",
            sa.String(length=20),
            nullable=False,
            comment="Session status: active, acknowledged, cancelled, expired",
        ),
        sa.Column(
            "message", sa.Text(), nullable=True, comment="Optional message from user"
        ),
        sa.Column(
            "acknowledged_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When session was acknowledged by first guardian",
        ),
        sa.Column(
            "acknowledged_by",
            sa.UUID(),
            nullable=True,
            comment="First guardian who acknowledged the session",
        ),
        sa.Column(
            "cancelled_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When session was cancelled by user",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["acknowledged_by"],
            ["guardians.id"],
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_panic_sessions_status"), "panic_sessions", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_panic_sessions_user_id"), "panic_sessions", ["user_id"], unique=False
    )
    op.create_table(
        "guardian_session_statuses",
        sa.Column(
            "session_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to panic session",
        ),
        sa.Column(
            "guardian_id", sa.UUID(), nullable=False, comment="Guardian being tracked"
        ),
        sa.Column(
            "status",
            sa.String(length=30),
            nullable=False,
            comment="Overall status: scheduled, contact_attempted, acknowledged, declined, no_response",
        ),
        sa.Column(
            "telegram_sent",
            sa.Boolean(),
            nullable=False,
            comment="Whether Telegram notification was sent",
        ),
        sa.Column(
            "voice_call_made",
            sa.Boolean(),
            nullable=False,
            comment="Whether voice call was made",
        ),
        sa.Column(
            "sms_sent", sa.Boolean(), nullable=False, comment="Whether SMS was sent"
        ),
        sa.Column(
            "responded_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When guardian first responded",
        ),
        sa.Column(
            "response_type",
            sa.String(length=10),
            nullable=True,
            comment="Guardian response: positive or negative",
        ),
        sa.Column(
            "response_method",
            sa.String(length=20),
            nullable=True,
            comment="How guardian responded: telegram, voice, sms",
        ),
        sa.Column(
            "excluded_from_cycle",
            sa.Integer(),
            nullable=True,
            comment="Which cycle number they were excluded from (if declined)",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["guardian_id"], ["guardians.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["session_id"], ["panic_sessions.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_guardian_session_statuses_guardian_id"),
        "guardian_session_statuses",
        ["guardian_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_guardian_session_statuses_session_id"),
        "guardian_session_statuses",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "panic_cycles",
        sa.Column(
            "session_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to panic session",
        ),
        sa.Column(
            "cycle_number",
            sa.Integer(),
            nullable=False,
            comment="Cycle number within session (1, 2, 3...)",
        ),
        sa.Column(
            "status",
            sa.String(length=20),
            nullable=False,
            comment="Cycle status: active, completed, expired",
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="When this cycle expires (10 minutes from start)",
        ),
        sa.Column(
            "scheduled_task_ids",
            sa.Text(),
            nullable=True,
            comment="JSON array of Celery task IDs for cancellation",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"], ["panic_sessions.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_panic_cycles_session_id"), "panic_cycles", ["session_id"], unique=False
    )
    op.alter_column(
        "guardians",
        "preferred_contact_method",
        existing_type=sa.VARCHAR(length=20),
        nullable=True,
        existing_comment="Preferred contact method: phone, telegram, both",
        existing_server_default=sa.text("'both'::character varying"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "guardians",
        "preferred_contact_method",
        existing_type=sa.VARCHAR(length=20),
        nullable=False,
        existing_comment="Preferred contact method: phone, telegram, both",
        existing_server_default=sa.text("'both'::character varying"),
    )
    op.drop_index(op.f("ix_panic_cycles_session_id"), table_name="panic_cycles")
    op.drop_table("panic_cycles")
    op.drop_index(
        op.f("ix_guardian_session_statuses_session_id"),
        table_name="guardian_session_statuses",
    )
    op.drop_index(
        op.f("ix_guardian_session_statuses_guardian_id"),
        table_name="guardian_session_statuses",
    )
    op.drop_table("guardian_session_statuses")
    op.drop_index(op.f("ix_panic_sessions_user_id"), table_name="panic_sessions")
    op.drop_index(op.f("ix_panic_sessions_status"), table_name="panic_sessions")
    op.drop_table("panic_sessions")
    # ### end Alembic commands ###
