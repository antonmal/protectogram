# pytest.ini - Protectogram v3.1 Testing Configuration
[tool:pytest]
minversion = 6.0
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Async support
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Test output configuration
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --maxfail=1
    -x
    --disable-warnings
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=80

# Markers for test categorization
markers =
    unit: Unit tests with all external dependencies mocked
    integration: Integration tests with local services (DB, Redis)
    e2e: End-to-end tests with real external services (staging only)
    critical: Critical safety scenarios that must pass
    panic: Tests related to panic button functionality
    trip: Tests related to trip tracking functionality
    guardian: Tests related to guardian management
    communication: Tests for SMS/call/telegram functionality
    slow: Tests that take more than 5 seconds to run
    suspension: Tests for trip suspension during panic scenarios

# Timeout configuration (prevent hanging tests)
timeout = 300
timeout_method = thread

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    error::UserWarning

# Environment configuration
env =
    ENVIRONMENT = test
    DATABASE_URL = postgresql://postgres:test@localhost:5433/protectogram_test  # pragma: allowlist secret
    REDIS_URL = redis://localhost:6379/1
    TELEGRAM_BOT_TOKEN = test_bot_token  # pragma: allowlist secret
    TELNYX_API_KEY = test_api_key  # pragma: allowlist secret
    PYTHONPATH = .

# Test discovery
python_paths = .

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = app
omit =
    app/migrations/*
    app/tests/*
    app/scripts/*
    */venv/*
    */site-packages/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
